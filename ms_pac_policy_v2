#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jan 27 22:54:54 2018

@author: bruceokallau
"""
import time
import tensorflow as tf
import tensorflow.contrib.slim as slim
import numpy as np
import gym
import matplotlib.pyplot as plt
from gym import wrappers

start_time = time.time()

try:
    xrange = xrange
except:
    xrange = range
# this imports the environment
env = gym.make('MsPacman-ram-v0')
''' ms pacman ram gives us the 128 byte RAM of the Atari game, possible actions range from 0-9?'''

gamma = 0.5

def discount_rewards(r):
    """ take 1D float array of rewards and compute discounted reward """
    discounted_r = np.zeros_like(r)
    running_add = 0
    for t in reversed(xrange(0, r.size)):
        running_add = running_add * gamma + 1 + r[t]
        discounted_r[t] = running_add
    return discounted_r

class agent():
    def __init__(self, lr, s_size,a_size,h_size):
        #These lines established the feed-forward part of the network. The agent takes a state and produces an action.
        self.state_in= tf.placeholder(shape=[None,s_size],dtype=tf.float32)
        hidden1 = slim.fully_connected(self.state_in,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden2 = slim.fully_connected(hidden1,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden3 = slim.fully_connected(hidden2,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden4 = slim.fully_connected(hidden3,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden5 = slim.fully_connected(hidden4,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden6 = slim.fully_connected(hidden5,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden7 = slim.fully_connected(hidden6,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden8 = slim.fully_connected(hidden7,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden9 = slim.fully_connected(hidden8,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        hidden10 = slim.fully_connected(hidden9,h_size,biases_initializer=None,activation_fn=tf.nn.relu)
        self.output = slim.fully_connected(hidden10,a_size,activation_fn=tf.nn.softmax,biases_initializer=None)
        self.chosen_action = tf.argmax(self.output,1)

        #The next six lines establish the training proceedure. We feed the reward and chosen action into the network
        #to compute the loss, and use it to update the network.
        self.reward_holder = tf.placeholder(shape=[None],dtype=tf.float32)
        self.action_holder = tf.placeholder(shape=[None],dtype=tf.int32)
        
        self.indexes = tf.range(0, tf.shape(self.output)[0]) * tf.shape(self.output)[1] + self.action_holder
        self.responsible_outputs = tf.gather(tf.reshape(self.output, [-1]), self.indexes)

        self.loss = -tf.reduce_mean(tf.log(self.responsible_outputs)*self.reward_holder)
        
        tvars = tf.trainable_variables()
        self.gradient_holders = []
        for idx,var in enumerate(tvars):
            placeholder = tf.placeholder(tf.float32,name=str(idx)+'_holder')
            self.gradient_holders.append(placeholder)
        
        self.gradients = tf.gradients(self.loss,tvars)
        
        optimizer = tf.train.AdamOptimizer(learning_rate=lr)
        self.update_batch = optimizer.apply_gradients(zip(self.gradient_holders,tvars))
        


tf.reset_default_graph() #Clear the Tensorflow graph.

myAgent = agent(lr=1e-2,s_size=128,a_size=9,h_size=256) #Load the agent.

total_episodes = 5000 #Set total number of episodes to train agent on.
max_ep = 999
update_frequency = 5
e = 0.75

init = tf.global_variables_initializer()

# Launch the tensorflow graph
with tf.Session() as sess:
    sess.run(init)
    i = 0
    total_reward = []
    total_lenght = []
        
    gradBuffer = sess.run(tf.trainable_variables())
    for ix,grad in enumerate(gradBuffer):
        gradBuffer[ix] = grad * 0
        
    while i < total_episodes:
        s = env.reset()
        env.render()
        running_reward = 0
        ep_history = []
        for j in range(max_ep):
            #Probabilistically pick an action given our network outputs.
            a_dist = sess.run(myAgent.output,feed_dict={myAgent.state_in:[s]})
            a = np.random.choice(a_dist[0],p=a_dist[0])
            a = np.argmax(a_dist == a)
            
            if np.random.rand(1) < e:
                a = env.action_space.sample()

            s1,r,d,l = env.step(a) #Get our reward for taking an action
            env.render()
            ep_history.append([s,a,r,s1,l])
            s = s1
            running_reward += (1+r)
            if e > 0.05:
                e = e - 0.05
            if d == True:
                #Update the network.
                ep_history = np.array(ep_history)
                ep_history[:,2] = discount_rewards(ep_history[:,2])
                feed_dict={myAgent.reward_holder:ep_history[:,2],
                        myAgent.action_holder:ep_history[:,1],myAgent.state_in:np.vstack(ep_history[:,0])}
                grads = sess.run(myAgent.gradients, feed_dict=feed_dict)
                for idx,grad in enumerate(grads):
                    gradBuffer[idx] += grad

                if i % update_frequency == 0 and i != 0:
                    feed_dict= dictionary = dict(zip(myAgent.gradient_holders, gradBuffer))
                    _ = sess.run(myAgent.update_batch, feed_dict=feed_dict)
                    for ix,grad in enumerate(gradBuffer):
                        gradBuffer[ix] = grad * 0
                
                total_reward.append(running_reward)
                total_lenght.append(j)
                break

        
            #Update our running tally of scores.
        if i % 100 == 0:
            print(np.mean(total_reward[-100:]))
        i += 1

#print("%f seconds" % (time.time() - start_time))
time_run = time.time() - start_time

# 10 hidden layers 
# 1 episode 210.0  1.537064 seconds
# 100 episodes 60.118103 seconds
# 1000 ep 688.225016 seconds
# 5000 ep 21697.09623980522 sec = 6.0269 hours


# took the Cartpole code and adjusted the inputs and outputs to work for Ms Pacman 1 episode 380  1.737 seconds  
# 100 episodes 90.0  36.493539 seconds
# 500 episodes 60.0 177.0198 seconds

